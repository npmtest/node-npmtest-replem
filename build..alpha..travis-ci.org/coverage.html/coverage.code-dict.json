{"/home/travis/build/npmtest/node-npmtest-replem/test.js":"/* istanbul instrument in package npmtest_replem */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-replem/lib.npmtest_replem.js":"/* istanbul instrument in package npmtest_replem */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_replem = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_replem = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-replem/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-replem && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_replem */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_replem\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_replem.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_replem.rollup.js'] =\n            local.assetsDict['/assets.npmtest_replem.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_replem.__dirname + '/lib.npmtest_replem.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-replem/node_modules/replem/bin/replem":"#!/usr/bin/env node\n\nrequire('../lib');\n","/home/travis/build/npmtest/node-npmtest-replem/node_modules/replem/lib/index.js":"const joinPath = require('path').join;\n\nconst extend = require('xtend/mutable');\nconst camelCase = require('camelcase');\nconst spinner = require('char-spinner');\nconst replHistory = require('repl.history');\nconst npa = require('npm-package-arg');\nconst S = require('sanctuary');\nconst _glob = require('glob');\nconst fs = require('fs');\nconst { Future } = require('ramda-fantasy');\nconst { __, chain, commute, complement, concat, cond, curry, curryN, evolve, find, head, ifElse, intersection, isEmpty, join, map, merge, mergeAll, nth, objOf, partial, path, pipe, project, propEq, replace, T, tail, tap, toUpper, unary } = require('ramda');\nconst help = require('./help');\nconst npm = require('./npm');\nconst formatInstalledList = require('./format-installed-list');\nconst parseArgv = require('./parse-argv');\n\n//    overlaps :: [a] -> [a] -> Boolean\nconst overlaps = pipe(intersection, complement(isEmpty));\nconst join2 = curryN(2, joinPath);\nconst unlines = join('\\n');\nconst die = (err) => {\n  console.error(err.message || err);\n  process.exit(1);\n};\n\nif (overlaps(['-v', '--verbose'], process.argv))\n  require('debug').enable('replem');\n\nconst debug = require('debug')('replem');\n\nconst capitalize = (str) => concat(toUpper(head(str)), tail(str));\nconst pascalCase = pipe(camelCase, capitalize);\nconst isUpper = (c) => toUpper(c) === c;\nconst isCapitalized = pipe(head, isUpper);\nconst pkgNameAsVar = ifElse(isCapitalized, pascalCase, camelCase);\n\nconst ALIAS  = /:([^!]+)/;\nconst EXTEND = /!$/;\nconst parseAlias = pipe(\n  S.match(ALIAS), chain(nth(1)));\nconst parseExtend = pipe(\n  S.match(EXTEND), map(T));\nconst rm = replace(__, '');\nconst cleanArg = pipe(...map(rm, [ EXTEND, ALIAS ]));\nconst orEmpty = S.fromMaybe({});\n\nconst parsePositionalArg = (arg) => {\n  const cleaned = cleanArg(arg);\n  return mergeAll([\n    orEmpty(map(objOf('alias'),  parseAlias(arg))),\n    orEmpty(map(objOf('extend'), parseExtend(arg))),\n    { npa: npa(cleaned) }\n  ]);\n};\n\nconst contextForPkg = curry((_require, obj) => {\n  const module = _require(obj.name);\n  return merge(\n    obj.extend ? module : {},\n    { [obj.alias]: module }\n  );\n});\n\nconst makeReplContext = (_require, pkgData) =>\n  mergeAll(concat(map(contextForPkg(_require), pkgData), [\n    { replem: { require: _require,\n                modules: pkgData } }\n  ]));\n\n//    glob :: String -> Future Error [String]\nconst glob = (path) => Future((rej, res) =>\n  _glob(path, (e, files) => e ? rej(e) : res(files)));\n\n//    readFile :: String -> String -> Future Error String\nconst readFile = curry((encoding, filename) =>\n  Future((rej, res) =>\n    fs.readFile(filename, encoding, (e, data) =>\n      e ? rej(e) : res(data))));\n\n//    traverse :: Applicative f => (a -> f b) -> t a -> f (t b)\nconst traverse = (fn) => pipe(map(fn), commute(Future.of));\n\n//    readDeps :: String -> Future Error [Object]\nconst readDeps = pipe(\n  (p) => joinPath(p, '*', 'package.json'),\n  glob,\n  chain(traverse(readFile('utf8'))),\n  map(map(unary(JSON.parse)))\n);\n\nconst makePkgMatchPred = cond([\n  [ propEq('type', 'range'),\n    (npa) => (pkg) =>\n      pkg._from === npa.raw ||\n      pkg._from === npa.name ||\n      pkg._from === `${npa.name}@${npa.spec}` ],\n  [ T,\n    (npa) => (pkg) =>\n      pkg._from === npa.raw ||\n      pkg._from === npa.name ]\n]);\n\n//    mergePkgData :: String -> [Object] -> Future Error [Object]\nconst mergePkgData = (modulesPath, pkgObjs) =>\n  readDeps(modulesPath)\n    .map(project(['_from', '_resolved', 'name', 'version']))\n    // _from in package.json is \"ramda@latest\" when install string is \"ramda\"\n    .map(map(evolve({ _from: replace(/@.*$/, '') })))\n    .map(data =>\n      map(arg =>\n        merge(arg, find(makePkgMatchPred(arg.npa), data))\n      , pkgObjs));\n\nconst defaultAliasToName = (pkg) =>\n  merge({ alias: pkgNameAsVar(pkg.name) }, pkg);\n\nconst main = (process) => {\n  const replemPath = join2(process.env.HOME, '.replem');\n  const replemModules = join2(replemPath, 'node_modules');\n  const replemRequire = pipe(join2(replemModules), require);\n  const argv = parseArgv(process.argv);\n  const pkgObjs = map(parsePositionalArg, argv._);\n  const rawPkgNames = map(path(['npa', 'raw']), pkgObjs);\n  debug('parsed args', pkgObjs);\n\n  if (argv.help || isEmpty(rawPkgNames)) die(help);\n  const interval = spinner();\n\n  npm.load({\n    progress: false,\n    loglevel: argv.verbose ? 'verbose' : 'silent',\n    prefix: replemPath\n  })\n  .chain(() => npm.install(rawPkgNames))\n  .chain(() => {\n    clearInterval(interval);\n    return mergePkgData(replemModules, pkgObjs);\n  })\n  .map(tap(partial(debug, ['pkg data'])))\n  .map(map(defaultAliasToName))\n  .fork(die, (pkgData) => {\n    console.log(unlines([\n      'Installed into REPL context:',\n      formatInstalledList(pkgData)\n    ]));\n\n    const repl = argv.repl ? replemRequire(argv.repl) : require('repl');\n    const r = repl.start({\n      prompt: '> ',\n      useGlobal: true\n    });\n    extend(r.context, makeReplContext(replemRequire, pkgData));\n    replHistory(r, join2(replemPath, 'history'));\n    if (argv.repl === false) r.close();\n  });\n};\n\nmain(process);\n","/home/travis/build/npmtest/node-npmtest-replem/node_modules/replem/lib/help.js":"module.exports = `\nUsage: replem [options] [<pkg>[:<alias>]]...\n\n      --repl     require a custom repl\n  -v, --verbose  enable verbose output\n  -h, --help     displays help\n\nExamples:\n\n  replem ramda:R            # Install and provide ramda as variable R\n  replem ramda!             # Extends REPL context with all functions of ramda\n  replem ecto/node-timeago  # Installs a module from GitHub\n  replem lodash@3.0.0       # Installs a module at specific version\n\nVersion: ${require('../package.json').version}\n\nREADME: https://github.com/raine/replem`\n  .replace(/^\\n/, '');\n","/home/travis/build/npmtest/node-npmtest-replem/node_modules/replem/lib/npm.js":"const { Future } = require('ramda-fantasy');\nconst npm = require('npm'); \nconst noop = () => {};\nconst log = console.log;\n\nexports.load = (opts) =>\n  Future((rej, res) =>\n    npm.load(opts, (err, data) =>\n      err ? rej(err) : res(data)\n    ));\n\nexports.install = (packages) =>\n  Future((rej, res) => {\n    console.log = noop;\n    npm.commands.install(packages, (err, out) => {\n      console.log = log;\n      err ? rej(err) : res(out);\n    });\n  });\n","/home/travis/build/npmtest/node-npmtest-replem/node_modules/replem/lib/format-installed-list.js":"const { concat, curry, filter, join, last, map, pipe, split, take } = require('ramda');\nconst { green, cyan } = require('chalk');\nconst S = require('sanctuary');\n\n//    startsWith :: String -> String -> Boolean\nconst startsWith = curry((x, str) => str.indexOf(x) === 0);\n\nconst unwords = join(' ');\nconst getResolvedSha = pipe( split('#'), last, take(7) );\n\nconst formatVersion = (resolved, version) =>\n  pipe(S.toMaybe,\n       filter(startsWith('git://')),\n       map(getResolvedSha),\n       S.maybe(`@${version}`, concat('#'))\n      )(resolved);\n\nconst formatInstalledList =\n  pipe(map(pipe(\n         ({alias, name, version, _resolved}) =>\n           unwords([\n             cyan(`${name}${formatVersion(_resolved, version)}`),\n             'as',\n             green(alias)\n           ]),\n         concat(' - '))),\n       join('\\n'));\n\n\nmodule.exports = formatInstalledList;\n","/home/travis/build/npmtest/node-npmtest-replem/node_modules/replem/lib/parse-argv.js":"const minimist = require('minimist');\n\nmodule.exports = (argv) =>\n  minimist(argv.slice(2), {\n    alias: { h: 'help', v: 'verbose' },\n    boolean: ['help', 'verbose']\n  });\n","/home/travis/build/npmtest/node-npmtest-replem/node_modules/replem/lib/str.js":"const { curry } = require('ramda');\n\n//    startsWith :: String -> String -> Boolean\nconst startsWith = curry((x, str) => str.indexOf(x) === 0);\n\nmodule.exports = {\n  startsWith\n};\n"}